{
  "folderName": "mrgn-common",
  "folderPath": ".autodoc/docs/json/packages/mrgn-common",
  "url": "https://github.com/mrgnlabs/mrgn-ts/.autodoc/docs/json/packages/mrgn-common",
  "files": [
    {
      "fileName": "tsconfig.json",
      "filePath": "packages/mrgn-common/tsconfig.json",
      "url": "https://github.com/mrgnlabs/mrgn-ts/packages/mrgn-common/tsconfig.json",
      "summary": "This code is a configuration file for the TypeScript compiler in the mrgn-ts project. The file is named `tsconfig.json` and is located in the root directory of the project. \n\nThe `extends` property specifies that this configuration file extends another configuration file located at `@mrgnlabs/tsconfig/base.json`. This means that the settings in `base.json` will be inherited by this file, and any changes made in this file will override the settings in `base.json`.\n\nThe `compilerOptions` property is an object that specifies options for the TypeScript compiler. In this case, the `resolveJsonModule` option is set to `true`, which allows TypeScript to import JSON files as modules. The `outDir` option specifies the output directory for compiled TypeScript files.\n\nThe `include` property is an array of file or directory paths to include in the compilation process. In this case, the `.` path includes all files in the current directory.\n\nThe `exclude` property is an array of file or directory paths to exclude from the compilation process. In this case, the `dist` and `node_modules` directories are excluded.\n\nOverall, this configuration file sets up the TypeScript compiler to compile all TypeScript files in the current directory, with output files going to the `dist` directory. It also allows for importing JSON files as modules. This file is an important part of the mrgn-ts project, as it ensures that TypeScript files are compiled correctly and consistently across the project. \n\nExample usage:\n```\n// Import a JSON file as a module\nimport data from './data.json';\n\n// Use the imported data\nconsole.log(data);\n```",
      "questions": "1. What is the base.json file that this code is extending from?\n- The code is extending from a file called base.json located in the @mrgnlabs/tsconfig directory.\n\n2. What is the purpose of the \"resolveJsonModule\" option in the compilerOptions?\n- The \"resolveJsonModule\" option allows the TypeScript compiler to import JSON files as modules.\n\n3. Why are the \"dist\" and \"node_modules\" directories excluded from the compilation process?\n- The \"dist\" directory is excluded because that is where the compiled code will be outputted. The \"node_modules\" directory is excluded because it contains external dependencies that do not need to be compiled."
    }
  ],
  "folders": [
    {
      "folderName": "src",
      "folderPath": ".autodoc/docs/json/packages/mrgn-common/src",
      "url": "https://github.com/mrgnlabs/mrgn-ts/.autodoc/docs/json/packages/mrgn-common/src",
      "files": [
        {
          "fileName": "accounting.ts",
          "filePath": "packages/mrgn-common/src/accounting.ts",
          "url": "https://github.com/mrgnlabs/mrgn-ts/packages/mrgn-common/src/accounting.ts",
          "summary": "The code in this file provides two functions for converting between annual percentage rate (APR) and annual percentage yield (APY). These functions are useful for financial calculations, particularly when comparing different investment options that may have different compounding frequencies.\n\nThe first function, `apyToApr`, takes an APY value (expressed as a decimal, e.g. 0.06 for 6%) and an optional compounding frequency (defaulting to the number of hours in a year) and returns the corresponding APR value. The formula used to perform this conversion is based on the assumption of compound interest, and is sourced from a blog post linked in the code comments.\n\nThe second function, `aprToApy`, takes an APR value (also expressed as a decimal) and an optional compounding frequency (again defaulting to the number of hours in a year) and returns the corresponding APY value. This formula is also based on compound interest and is sourced from the same blog post.\n\nBoth functions use the same compounding frequency parameter, which allows for flexibility in the calculations. For example, if an investment compounds monthly instead of annually, the compounding frequency can be set to 12 to get more accurate results.\n\nHere is an example usage of these functions:\n\n```\nimport { apyToApr, aprToApy } from 'mrgn-ts';\n\nconst apy = 0.06;\nconst apr = apyToApr(apy); // 0.0582\nconst newApy = aprToApy(apr); // 0.06\n```\n\nIn this example, we start with an APY value of 6% and use `apyToApr` to convert it to an APR value of 5.82%. We then use `aprToApy` to convert the APR value back to an APY value of 6%, demonstrating that the functions are inverses of each other.",
          "questions": "1. What is the purpose of this code?\n- This code provides functions for converting between annual percentage yield (APY) and annual percentage rate (APR) based on a given compounding frequency.\n\n2. What is the source of the formulas used in these functions?\n- The formulas used in these functions are sourced from http://www.linked8.com/blog/158-apy-to-apr-and-apr-to-apy-calculation-methodologies.\n\n3. What is the default value for the `compoundingFrequency` parameter in these functions?\n- The default value for the `compoundingFrequency` parameter is `HOURS_PER_YEAR`, which is a constant defined as 365.25 * 24."
        },
        {
          "fileName": "constants.ts",
          "filePath": "packages/mrgn-common/src/constants.ts",
          "url": "https://github.com/mrgnlabs/mrgn-ts/packages/mrgn-common/src/constants.ts",
          "summary": "This file contains several constants and types that are used throughout the mrgn-ts project. \n\nThe first three constants define default options for sending and confirming transactions on the Solana blockchain using the `@solana/web3.js` library. \n\n`DEFAULT_COMMITMENT` is a type of `Commitment` that specifies the level of commitment that should be used when sending or confirming transactions. In this case, the default is set to \"processed\", which means that the transaction will be considered final once it has been processed by the network.\n\n`DEFAULT_SEND_OPTS` is a type of `SendOptions` that specifies additional options for sending transactions. The `skipPreflight` option is set to `false`, which means that the transaction will be checked for errors before being sent. The `preflightCommitment` option is set to `DEFAULT_COMMITMENT`, which means that the level of commitment used during preflight checks will be the same as the level of commitment used during confirmation.\n\n`DEFAULT_CONFIRM_OPTS` is a type of `ConfirmOptions` that specifies options for confirming transactions. The `commitment` option is set to `DEFAULT_COMMITMENT`, which means that the level of commitment used during confirmation will be the same as the level of commitment used during preflight checks. The `...DEFAULT_SEND_OPTS` syntax spreads the `DEFAULT_SEND_OPTS` object into `DEFAULT_CONFIRM_OPTS`, so that all of the options specified in `DEFAULT_SEND_OPTS` are also included in `DEFAULT_CONFIRM_OPTS`.\n\nThe final constant, `USDC_DECIMALS`, is a number that represents the number of decimal places used by the USDC stablecoin. This constant is used throughout the mrgn-ts project to convert between USDC amounts and their equivalent amounts in other currencies or tokens.\n\nOverall, this file provides default options and constants that are used throughout the mrgn-ts project to interact with the Solana blockchain and perform calculations involving USDC. Developers working on the project can use these constants and types to simplify their code and ensure consistency across different parts of the project. \n\nExample usage:\n\n```\nimport { DEFAULT_CONFIRM_OPTS, USDC_DECIMALS } from \"mrgn-ts\";\n\n// Use DEFAULT_CONFIRM_OPTS to confirm a transaction\nawait connection.confirmTransaction(txHash, DEFAULT_CONFIRM_OPTS);\n\n// Convert a USDC amount to a SOL amount\nconst usdcAmount = 100;\nconst solAmount = usdcAmount / (10 ** USDC_DECIMALS);\n```",
          "questions": "1. What is the purpose of the `mrgn-ts` project?\n- As a code documentation expert, I do not have enough information to answer this question. The code provided only shows a few constants and imports from the `@solana/web3.js` library.\n\n2. What is the significance of the `DEFAULT_COMMITMENT` constant?\n- The `DEFAULT_COMMITMENT` constant is of type `Commitment` and is set to the string value \"processed\". It is likely used as a default value for a parameter that requires a `Commitment` type.\n\n3. What is the purpose of the `USDC_DECIMALS` constant?\n- The `USDC_DECIMALS` constant is set to the integer value 6. It is likely used to represent the number of decimal places for the USDC cryptocurrency, which is commonly used in the Solana blockchain ecosystem."
        },
        {
          "fileName": "conversion.ts",
          "filePath": "packages/mrgn-common/src/conversion.ts",
          "url": "https://github.com/mrgnlabs/mrgn-ts/packages/mrgn-common/src/conversion.ts",
          "summary": "This file contains several utility functions that are used to convert and manipulate different types of data in the mrgn-ts project. \n\nThe `wrappedI80F48toBigNumber` function takes a `BN` object and a `scaleDecimal` number as input and returns a `BigNumber` object. It converts the input `BN` object to a binary string and then to a decimal number using the `Decimal` library. The resulting decimal number is then divided by 10 to the power of `scaleDecimal` and returned as a `BigNumber` object. This function is used to convert a wrapped I80F48 number to a `BigNumber` object.\n\nThe `toNumber` function takes an `Amount` object as input and returns a `number`. It checks the type of the input and converts it to a `number` if it is a `string` or an `Amount` object. This function is used to convert a UI representation of a token amount to its native value as a `number`.\n\nThe `toBigNumber` function takes an `Amount` or `BN` object as input and returns a `BigNumber` object. It checks the type of the input and converts it to a `BigNumber` object if it is not already one. This function is used to convert a UI representation of a token amount to its native value as a `BigNumber` object.\n\nThe `uiToNative` function takes an `Amount` object and a `decimals` number as input and returns a `BN` object. It first converts the input `Amount` object to a `BigNumber` object using the `toBigNumber` function. It then multiplies the resulting `BigNumber` object by 10 to the power of `decimals` and returns the result as a `BN` object. This function is used to convert a UI representation of a token amount to its native value as a `BN` object.\n\nThe `nativeToUi` function takes an `Amount` or `BN` object and a `decimals` number as input and returns a `number`. It first converts the input `Amount` or `BN` object to a `BigNumber` object using the `toBigNumber` function. It then divides the resulting `BigNumber` object by 10 to the power of `decimals` and returns the result as a `number`. This function is used to convert a native representation of a token amount to its UI value as a `number`.\n\nThe `shortenAddress` function takes an `Address` object and a `chars` number as input and returns a shortened string representation of the input address. It first converts the input `Address` object to a string and then returns a string that contains the first `chars` characters of the input address, followed by an ellipsis, followed by the last `chars` characters of the input address. This function is used to shorten the checksummed version of an input address to have 4 characters at the start and end.",
          "questions": "1. What is the purpose of the `wrappedI80F48toBigNumber` function?\n- The `wrappedI80F48toBigNumber` function converts a 64-bit fixed-point number to a BigNumber with a specified scale.\n\n2. What is the purpose of the `uiToNative` function?\n- The `uiToNative` function converts a UI representation of a token amount into its native value as a BN, given the specified mint decimal amount.\n\n3. What is the purpose of the `shortenAddress` function?\n- The `shortenAddress` function shortens the checksummed version of an input address to have 4 characters at the start and end."
        },
        {
          "fileName": "index.ts",
          "filePath": "packages/mrgn-common/src/index.ts",
          "url": "https://github.com/mrgnlabs/mrgn-ts/packages/mrgn-common/src/index.ts",
          "summary": "This code exports various modules from the `mrgn-ts` project, including constants, types, miscellaneous functions, conversion utilities, accounting tools, and a module called `spl`. Additionally, it exports a class called `NodeWallet` from a file called `nodeWallet`.\n\nThe purpose of this code is to make these modules and the `NodeWallet` class available for use in other parts of the `mrgn-ts` project or in other projects that import this code. By exporting these modules and class, other developers can easily access and utilize the functionality provided by these modules without having to write their own implementations.\n\nFor example, if a developer wanted to use the `NodeWallet` class in another part of the project, they could simply import it like this:\n\n```\nimport { NodeWallet } from \"mrgn-ts\";\n```\n\nSimilarly, if they needed to use any of the constants, types, or utility functions provided by the other modules, they could import them in the same way.\n\nOverall, this code serves as a way to organize and make available various pieces of functionality within the `mrgn-ts` project, allowing for easier development and maintenance of the project as a whole.",
          "questions": "1. **What is the purpose of the `NodeWallet` import?** \n    The `NodeWallet` import is used in this file, but it is not clear what it is used for or how it is used in the project. \n\n2. **What are the contents of the exported modules?** \n    The file exports multiple modules, including `constants`, `types`, `misc`, `conversion`, `accounting`, and `spl`. It is not clear what each of these modules contains or how they are used in the project. \n\n3. **Why is `NodeWallet` exported separately from the other modules?** \n    It is not clear why `NodeWallet` is exported separately from the other modules. It may have a unique purpose or be used in a different way than the other modules."
        },
        {
          "fileName": "misc.ts",
          "filePath": "packages/mrgn-common/src/misc.ts",
          "url": "https://github.com/mrgnlabs/mrgn-ts/packages/mrgn-common/src/misc.ts",
          "summary": "The code in this file provides helper functions for transaction processing and keypair loading in the mrgn-ts project. The `loadKeypair` function loads a keypair from a file path provided as an argument. If the path starts with `~`, it is replaced with the user's home directory path. The function then reads the file and returns a `Keypair` object created from the secret key stored in the file.\n\nThe `processTransaction` function is a helper function for processing transactions using the `@project-serum/anchor` library and the `@solana/web3.js` library. It takes a `provider` object, which is an instance of `AnchorProvider` that contains a connection to a Solana node and a wallet, a `tx` object, which is an instance of `Transaction` that represents the transaction to be processed, an optional array of `signers`, which are additional signers to be used in the transaction, and an optional `opts` object, which contains options for confirming the transaction. The function first creates a new `Connection` object using the `rpcEndpoint` and `opts` properties of the `provider` object. It then gets the latest blockhash and context from the Solana node using the `getLatestBlockhashAndContext` method of the `Connection` object. It sets the `recentBlockhash` property of the `tx` object to the blockhash obtained from the node, sets the `feePayer` property of the `tx` object to the public key of the wallet in the `provider` object, and signs the transaction using the wallet in the `provider` object. If additional signers are provided, the function partially signs the transaction using each signer. Finally, the function sends the signed transaction to the Solana node using the `sendRawTransaction` method of the `Connection` object and confirms the transaction using the `confirmTransaction` method of the `Connection` object. If an error occurs during the transaction processing, the function logs the error and throws it.\n\nThe `sleep` function is an internal helper function that takes a number of milliseconds as an argument and returns a promise that resolves after the specified number of milliseconds.\n\nThese functions can be used in the mrgn-ts project to load keypairs and process transactions on the Solana blockchain. For example, the `loadKeypair` function can be used to load a keypair from a file path and pass it to the `processTransaction` function as an additional signer. The `processTransaction` function can be used to send a transaction to the Solana blockchain and confirm it. The `sleep` function can be used internally in the project to delay execution for a specified amount of time.",
          "questions": "1. What is the purpose of the `loadKeypair` function?\n- The `loadKeypair` function loads a keypair from a provided file and returns it as a `Keypair` object.\n\n2. What is the purpose of the `processTransaction` function?\n- The `processTransaction` function is a helper function for processing transactions and handling errors. It takes in a provider, a transaction, an optional array of signers, and optional confirmation options, and returns a transaction signature.\n\n3. What is the purpose of the `sleep` function?\n- The `sleep` function is an internal function that returns a promise that resolves after a specified number of milliseconds. It is likely used for delaying execution in certain parts of the code."
        },
        {
          "fileName": "nodeWallet.ts",
          "filePath": "packages/mrgn-common/src/nodeWallet.ts",
          "url": "https://github.com/mrgnlabs/mrgn-ts/packages/mrgn-common/src/nodeWallet.ts",
          "summary": "The `NodeWallet` class is a wallet implementation that is compliant with the Anchor framework. It provides functionality for signing transactions and retrieving the public key associated with the wallet. \n\nThe constructor takes a `Keypair` object as an argument, which represents the payer associated with the wallet. The `Keypair` object contains the public and private keys used for signing transactions. \n\nThe class provides two factory methods for creating instances of the `NodeWallet` class. The `local()` method reads the payer's secret key from the `MARGINFI_WALLET` environment variable, or from the `$HOME/.config/solana/id.json` file if the environment variable is not set. The `anchor()` method reads the payer's secret key from the `ANCHOR_WALLET` environment variable. If the environment variable is not set, an error is thrown. \n\nThe `signTransaction()` method takes a transaction object as an argument and signs it using the payer's private key. If the transaction is a `VersionedTransaction`, the `sign()` method is used to sign the transaction. Otherwise, the `partialSign()` method is used. The method returns the signed transaction object. \n\nThe `signAllTransactions()` method takes an array of transaction objects as an argument and signs each transaction using the payer's private key. The method returns an array of signed transaction objects. \n\nThe `publicKey` getter returns the public key associated with the payer's `Keypair` object. \n\nThis class can be used in the larger project to sign transactions and interact with the Solana blockchain. For example, the `signTransaction()` method can be used to sign a transaction before submitting it to the blockchain. \n\nExample usage:\n\n```\nimport { NodeWallet } from \"mrgn-ts\";\n\nconst payer = Keypair.generate();\nconst wallet = new NodeWallet(payer);\n\nconst transaction = new Transaction().add(...);\nconst signedTransaction = await wallet.signTransaction(transaction);\n```",
          "questions": "1. What is the purpose of this code and what problem does it solve?\n- This code provides an implementation of a wallet for the Solana blockchain using the `@solana/web3.js` library. It allows for signing of transactions and retrieval of the public key associated with the wallet.\n\n2. What are the differences between the `local()` and `anchor()` factory methods?\n- The `local()` method creates a wallet using the `MARGINFI_WALLET` environment variable or a default file path, while the `anchor()` method creates a wallet using the `ANCHOR_WALLET` environment variable. If the `ANCHOR_WALLET` variable is not set, an error is thrown.\n\n3. What is the purpose of the `signAllTransactions()` method and how does it work?\n- The `signAllTransactions()` method takes an array of transactions and signs each one using the associated payer keypair. If the transaction is a `VersionedTransaction`, it is signed using the `sign()` method with an array of keypairs, while if it is a regular `Transaction`, it is signed using the `partialSign()` method with a single keypair. The method returns an array of signed transactions."
        },
        {
          "fileName": "types.ts",
          "filePath": "packages/mrgn-common/src/types.ts",
          "url": "https://github.com/mrgnlabs/mrgn-ts/packages/mrgn-common/src/types.ts",
          "summary": "This file contains various type definitions and imports necessary for interacting with the Solana blockchain using the Anchor framework. \n\nThe `AnchorProvider` and `AnchorProgram` classes are imported from the `@project-serum/anchor` package, which is a library for building Solana programs using TypeScript. The `SignerWalletAdapter` class is imported from the `@solana/wallet-adapter-base` package, which provides a base implementation for wallet adapters that can be used with Solana wallets. The `ConfirmOptions`, `Keypair`, `PublicKey`, and `TransactionInstruction` classes are imported from the `@solana/web3.js` package, which is a library for interacting with the Solana blockchain. The `BigNumber` class is imported from the `bignumber.js` package, which is a library for working with arbitrary-precision decimal numbers. Finally, the `Idl` interface is imported from the `@coral-xyz/anchor` package, which is a library for defining Solana program interfaces using TypeScript.\n\nThe file defines several custom types and interfaces. The `Program` type is a generic type that extends the `AnchorProgram` class and adds a `provider` property of type `AnchorProvider`. This type is used to create instances of Solana programs that can be interacted with using the Anchor framework. The `ProgramReadonly` type is a generic type that simply extends the `AnchorProgram` class. This type is used to create read-only instances of Solana programs that cannot be modified. The `Amount` type is a union type that can represent a `BigNumber`, a `number`, or a `string`. This type is used to represent amounts of tokens or other assets on the Solana blockchain. The `Wallet` interface is an interface that extends the `SignerWalletAdapter` class and adds a `publicKey` property of type `PublicKey`. This interface is used to represent a Solana wallet that can sign transactions. The `TransactionOptions` interface extends the `ConfirmOptions` interface and adds a `dryRun` property of type `boolean`. This interface is used to specify options for sending transactions to the Solana blockchain. The `InstructionsWrapper` interface is an interface that contains an array of `TransactionInstruction` objects and an array of `Keypair` objects. This interface is used to wrap multiple instructions and keys into a single object for convenience. The `WrappedI80F48` interface is an interface that contains a `value` property of type `BN`. This interface is used to represent a fixed-point decimal number on the Solana blockchain.\n\nOverall, this file provides the necessary type definitions and imports for interacting with the Solana blockchain using the Anchor framework. These types and interfaces can be used throughout the larger project to create and interact with Solana programs, wallets, and transactions. For example, the `Program` type can be used to create an instance of a Solana program, the `Wallet` interface can be used to represent a user's Solana wallet, and the `TransactionOptions` interface can be used to specify options for sending transactions to the Solana blockchain.",
          "questions": "1. What is the purpose of this code and what does it do?\n- This code defines various types and imports necessary modules for working with the mrgn-ts project, including the Anchor framework, Solana wallet adapter, and BigNumber library.\n\n2. What is the significance of the `Program` and `ProgramReadonly` types?\n- The `Program` type is an extension of the `AnchorProgram` type that includes a `provider` property, while the `ProgramReadonly` type is simply the `AnchorProgram` type without any modifications. These types are used to interact with the Anchor program and its associated state.\n\n3. What is the `WrappedI80F48` interface used for?\n- The `WrappedI80F48` interface defines a single property `value` of type `BN`, which is used to represent a fixed-point decimal number with 80 integer bits and 48 fractional bits. This interface is likely used in calculations involving financial values within the mrgn-ts project."
        }
      ],
      "folders": [],
      "summary": "The `mrgn-common/src` folder contains several TypeScript files that provide various utility functions, constants, and types for the `mrgn-ts` project. \n\nThe `accounting.ts` file provides two functions for converting between annual percentage rate (APR) and annual percentage yield (APY), which are useful for financial calculations involving different investment options. The `apyToApr` function takes an APY value and an optional compounding frequency and returns the corresponding APR value. The `aprToApy` function takes an APR value and an optional compounding frequency and returns the corresponding APY value. These functions can be used to compare different investment options that may have different compounding frequencies.\n\nThe `constants.ts` file provides several constants and types that are used throughout the `mrgn-ts` project. These include default options for sending and confirming transactions on the Solana blockchain, as well as a constant for the number of decimal places used by the USDC stablecoin. These constants and types can be used to simplify code and ensure consistency across different parts of the project.\n\nThe `conversion.ts` file provides several utility functions for converting and manipulating different types of data in the `mrgn-ts` project. These include functions for converting wrapped I80F48 numbers to `BigNumber` objects, converting token amounts between UI and native representations, and shortening addresses. These functions can be used to simplify data manipulation and conversion in the project.\n\nThe `index.ts` file exports various modules from the `mrgn-ts` project, including constants, types, miscellaneous functions, conversion utilities, accounting tools, and a module called `spl`. Additionally, it exports a class called `NodeWallet` from a file called `nodeWallet`. This file serves as a way to organize and make available various pieces of functionality within the `mrgn-ts` project, allowing for easier development and maintenance of the project as a whole.\n\nThe `misc.ts` file provides helper functions for transaction processing and keypair loading in the `mrgn-ts` project. These functions can be used to load keypairs and process transactions on the Solana blockchain.\n\nThe `nodeWallet.ts",
      "questions": ""
    }
  ],
  "summary": "Name: nodeWallet.ts\n\nSummary: The `nodeWallet.ts` file contains a class called `NodeWallet` that provides a way to manage Solana keypairs and sign transactions on the Solana blockchain. This class is used in various parts of the `mrgn-ts` project to interact with the Solana blockchain.\n\nThe `NodeWallet` class has several methods for managing keypairs and signing transactions. The `load` method takes a path to a JSON file containing a Solana keypair and loads it into memory. The `signTransaction` method takes a transaction object and signs it with the loaded keypair. The `getPublicKey` method returns the public key associated with the loaded keypair.\n\nThis class is used in various parts of the `mrgn-ts` project to interact with the Solana blockchain. For example, it can be used to load a keypair for a user's Solana wallet and sign transactions on their behalf. It can also be used to sign transactions for a smart contract on the Solana blockchain.\n\nExample usage:\n\n```\nimport { NodeWallet } from '@mrgn/common';\n\n// Load a keypair from a JSON file\nconst wallet = new NodeWallet();\nawait wallet.load('/path/to/keypair.json');\n\n// Get the public key associated with the loaded keypair\nconst publicKey = wallet.getPublicKey();\n\n// Sign a transaction with the loaded keypair\nconst transaction = new Transaction().add(instruction);\nawait wallet.signTransaction(transaction);\n```",
  "questions": ""
}