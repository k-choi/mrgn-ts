{
  "fileName": "group.ts",
  "filePath": "packages/marginfi-client-v2/src/group.ts",
  "url": "https://github.com/mrgnlabs/mrgn-ts/packages/marginfi-client-v2/src/group.ts",
  "summary": "The `MarginfiGroup` class is a wrapper around a specific Marginfi group. It provides methods to fetch and store the latest on-chain state of the group, as well as getters to access the group's admin and banks. \n\nThe `MarginfiGroup` class has three factories: `fetch`, `fromAccountData`, and `fromAccountDataRaw`. The `fetch` factory fetches account data according to the provided config and instantiates the corresponding `MarginfiGroup`. The `fromAccountData` and `fromAccountDataRaw` factories instantiate a `MarginfiGroup` according to the provided decoded or encoded data. \n\nThe `MarginfiGroup` class also has a `reload` method that updates the instance data by fetching and storing the latest on-chain state. \n\nThe `MarginfiGroup` class has three getters: `admin`, `banks`, and `getBankByLabel`. The `admin` getter returns the Marginfi account authority address. The `banks` getter returns a map of the group's banks. The `getBankByLabel` getter returns the bank with the provided label. \n\nThe `MarginfiGroup` class has three methods: `getBankByPk`, `getBankByMint`, and `decode`. The `getBankByPk` method returns the bank with the provided public key. The `getBankByMint` method returns the bank with the provided mint. The `decode` method decodes the provided raw data buffer according to the Anchor IDL. \n\nOverall, the `MarginfiGroup` class provides a convenient way to interact with a specific Marginfi group and its banks. It can be used in the larger project to manage Marginfi groups and their associated banks. \n\nExample usage:\n\n```\nimport { PublicKey } from \"@solana/web3.js\";\nimport { MarginfiConfig, MarginfiProgram } from \"./types\";\nimport MarginfiGroup from \"./marginfiGroup\";\n\nconst config: MarginfiConfig = {...};\nconst program: MarginfiProgram = {...};\n\nconst group = await MarginfiGroup.fetch(config, program);\nconst admin = group.admin;\nconst banks = group.banks;\nconst bankByLabel = group.getBankByLabel(\"USDC\");\nconst bankByPk = group.getBankByPk(new PublicKey(\"...\"));\nconst bankByMint = group.getBankByMint(new PublicKey(\"...\"));\n```",
  "questions": "1. What is the purpose of the `MarginfiGroup` class?\n- The `MarginfiGroup` class is a wrapper around a specific marginfi group and provides methods for fetching and updating account data, as well as accessing information about the group's banks.\n\n2. What is the role of the `Bank` class in relation to the `MarginfiGroup` class?\n- The `Bank` class represents an asset bank associated with a `MarginfiGroup`, and is used to fetch and store data about the bank's price data and configuration.\n\n3. What is the significance of the `DEFAULT_COMMITMENT` import?\n- The `DEFAULT_COMMITMENT` import is used as a fallback value for the `commitment` parameter in various methods if it is not provided, and is defined in the `@mrgnlabs/mrgn-common` package."
}
