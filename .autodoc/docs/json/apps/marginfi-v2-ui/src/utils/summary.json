{
  "folderName": "utils",
  "folderPath": ".autodoc/docs/json/apps/marginfi-v2-ui/src/utils",
  "url": "https://github.com/mrgnlabs/mrgn-ts/.autodoc/docs/json/apps/marginfi-v2-ui/src/utils",
  "files": [
    {
      "fileName": "formatters.ts",
      "filePath": "apps/marginfi-v2-ui/src/utils/formatters.ts",
      "url": "https://github.com/mrgnlabs/mrgn-ts/apps/marginfi-v2-ui/src/utils/formatters.ts",
      "summary": "This file contains several instances of the Intl.NumberFormat class, which is used for formatting numbers according to a specific locale. The purpose of this code is to provide pre-configured number formatters for use throughout the larger mrgn-ts project.\n\nThe first two instances, groupedNumberFormatter and groupedNumberFormatterDyn, format numbers with grouping separators (e.g. commas) and a fixed number of decimal places. The difference between the two is that groupedNumberFormatterDyn allows for a variable number of decimal places, while groupedNumberFormatter always displays two decimal places.\n\nThe next instance, usdFormatter, formats numbers as US dollars with a currency symbol and a fixed number of decimal places. This formatter is useful for displaying monetary values in a standardized way.\n\nThe final two instances, percentFormatter and percentFormatterDyn, format numbers as percentages with a fixed or variable number of decimal places. These formatters are useful for displaying percentages in a standardized way.\n\nOverall, this code provides a set of pre-configured number formatters that can be used throughout the mrgn-ts project to ensure consistent formatting of numbers, currencies, and percentages. Here is an example of how these formatters might be used:\n\n```\nimport { usdFormatter, percentFormatter } from 'mrgn-ts';\n\nconst revenue = 12345.67;\nconst growthRate = 0.1234;\n\nconsole.log(usdFormatter.format(revenue)); // \"$12,345.67\"\nconsole.log(percentFormatter.format(growthRate)); // \"12.34%\"\n```",
      "questions": "1. What is the purpose of this code?\n   This code exports several instances of the Intl.NumberFormat class with different configurations for formatting numbers and currencies in the en-US locale.\n\n2. What are the differences between the various formatters?\n   The formatters differ in their style (currency or percent), the number of minimum and maximum fraction digits, and whether or not they use grouping separators.\n\n3. Can these formatters be used for other locales besides en-US?\n   Yes, the Intl.NumberFormat class supports formatting for different locales by passing the locale code as the first argument to the constructor. However, this code specifically configures the formatters for the en-US locale."
    },
    {
      "fileName": "index.ts",
      "filePath": "apps/marginfi-v2-ui/src/utils/index.ts",
      "url": "https://github.com/mrgnlabs/mrgn-ts/apps/marginfi-v2-ui/src/utils/index.ts",
      "summary": "This file contains various utility functions and types that are used in the mrgn-ts project. \n\nThe first section of the code imports several dependencies, including `@solana/web3.js`, `superstruct`, and `@mrgnlabs/mrgn-common`. It also imports a JSON file called `token_info.json` that contains metadata about various tokens. \n\nThe next section of the code defines two utility functions: `floor` and `ceil`. These functions take a `value` and a `decimals` argument and return the `value` rounded down or up to the specified number of decimal places, respectively. These functions may be used throughout the project to perform math operations on token values. \n\nThe next section of the code defines several types and functions related to token metadata. The `TokenMetadataRaw` type represents the raw metadata for a single token, while the `TokenMetadataList` type represents an array of `TokenMetadataRaw` objects. The `parseTokenMetadata` function takes a `TokenMetadataRaw` object and returns a `TokenMetadata` object that contains only the `logoURI` property. The `parseTokenMetadatas` function takes an array of `TokenMetadataRaw` objects and returns an object that maps token symbols to `TokenMetadata` objects. Finally, the `loadTokenMetadatas` function asserts that the `tokenInfos` variable (which is imported from `token_info.json`) is an array of `TokenMetadataRaw` objects, and then returns the result of calling `parseTokenMetadatas` on `tokenInfos`. These functions may be used throughout the project to load and parse token metadata. \n\nThe final section of the code defines two utility functions related to airdrops. The `FAUCET_PROGRAM_ID` constant represents the public key of the program that handles airdrops. The `makeAirdropCollateralIx` function takes an `amount`, a `mint` public key, a `tokenAccount` public key, and a `faucet` public key, and returns a `TransactionInstruction` object that can be used to initiate an airdrop. This function first generates a program-derived address (PDA) for the faucet using `PublicKey.findProgramAddressSync`, and then constructs an array of `keys` that includes the PDA, the `mint` public key, the `tokenAccount` public key, the `TOKEN_PROGRAM_ID` constant, and the `faucet` public key. Finally, it returns a new `TransactionInstruction` object that includes the `FAUCET_PROGRAM_ID` constant, a buffer containing the `amount` and some additional data, and the `keys` array. This function may be used throughout the project to initiate airdrops.",
      "questions": "1. What is the purpose of the `floor` and `ceil` functions?\n- The `floor` and `ceil` functions are used to round a number to a specified number of decimal places.\n\n2. What is the `TokenMetadata` type and how is it used?\n- The `TokenMetadata` type is a custom type that represents metadata for a token. It is used in the `parseTokenMetadata` and `parseTokenMetadatas` functions to parse raw token metadata and return a standardized format.\n\n3. What is the `makeAirdropCollateralIx` function and what does it do?\n- The `makeAirdropCollateralIx` function creates a transaction instruction for an airdrop collateral operation. It takes in parameters such as the amount, mint, token account, and faucet, and returns a `TransactionInstruction` object that can be used to execute the operation."
    }
  ],
  "folders": [],
  "summary": "The `formatters.ts` file in the `utils` folder of the `marginfi-v2-ui` app provides pre-configured number formatters for use throughout the larger `mrgn-ts` project. The file contains several instances of the `Intl.NumberFormat` class, which is used for formatting numbers according to a specific locale. \n\nThe first two instances, `groupedNumberFormatter` and `groupedNumberFormatterDyn`, format numbers with grouping separators (e.g. commas) and a fixed number of decimal places. The difference between the two is that `groupedNumberFormatterDyn` allows for a variable number of decimal places, while `groupedNumberFormatter` always displays two decimal places. The `usdFormatter` instance formats numbers as US dollars with a currency symbol and a fixed number of decimal places. The `percentFormatter` and `percentFormatterDyn` instances format numbers as percentages with a fixed or variable number of decimal places. \n\nThese formatters can be imported and used throughout the `mrgn-ts` project to ensure consistent formatting of numbers, currencies, and percentages. For example, the `usdFormatter` and `percentFormatter` might be used to display monetary values and growth rates in a standardized way. \n\nThe `index.ts` file in the same folder contains various utility functions and types that are used in the `mrgn-ts` project. The file imports several dependencies, including `@solana/web3.js`, `superstruct`, and `@mrgnlabs/mrgn-common`, as well as a JSON file called `token_info.json` that contains metadata about various tokens. \n\nThe file defines two utility functions, `floor` and `ceil`, which can be used throughout the project to perform math operations on token values. It also defines several types and functions related to token metadata, including `TokenMetadataRaw`, `TokenMetadataList`, `parseTokenMetadata`, `parseTokenMetadatas`, and `loadTokenMetadatas`. These functions can be used to load and parse token metadata throughout the project. \n\nFinally, the file defines two utility functions related to airdrops, including `FAUCET_PROGRAM_ID` and `makeAirdropCollateralIx`. These functions can be used to initiate airdrops throughout the project. \n\nOverall, the `utils` folder in the `marginfi-v2-ui` app provides a set of utility functions and pre-configured formatters that can be used throughout the larger `mrgn-ts` project to ensure consistent formatting and functionality. \n\nHere is an example of how the `floor` and `usdFormatter` functions might be used:\n\n```\nimport { floor, usdFormatter } from 'mrgn-ts';\n\nconst tokenValue = 12345.6789;\nconst roundedValue = floor(tokenValue, 2);\n\nconsole.log(usdFormatter.format(roundedValue)); // \"$12,345.68\"\n```",
  "questions": ""
}
